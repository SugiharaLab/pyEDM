variables:
    CIBW_BUILD: cp38-* cp39-* cp310-* cp311-*

    # Skip musllinux and 32-bit builds
    CIBW_SKIP: "*-musllinux_* *-win32 *-manylinux_i686"

    CIBW_BEFORE_ALL_LINUX: >
      yum install -y lapack-devel   &&
      yum install -y libpng-devel   &&
      yum install -y freetype-devel &&
      yum install -y freetype       &&
      yum install -y blas-devel;

    CIBW_BEFORE_BUILD: pip install -r requirements.txt; 

strategy:
  matrix:
#    Windows_3.8:
#      vmImage: 'windows-latest'
#      build_name: 'Windows_38'
#      python.version: '3.8'
#    Windows_3.9:
#      vmImage: 'windows-2019'
#      build_name: 'Windows_39'
#      python.version: '3.9'
#    Windows_3.10:
#      vmImage: 'windows-latest'
#      build_name: 'Windows_310'
#      python.version: '3.10'
    Windows_3.11:
      vmImage: 'windows-latest'
      build_name: 'Windows_311'
      python.version: '3.11'
#    MacOS_3.8:
#      vmImage: 'macos-latest'
#      build_name: 'MacOS_38'
#      python.version: '3.8'
#    MacOS_3.9:
#      vmImage: 'macos-latest'
#      build_name: 'MacOS_39'
#      python.version: '3.9'
#    MacOS_3.10:
#      vmImage: 'macos-latest'
#      build_name: 'MacOS_310'
#      python.version: '3.10'
#    MacOS_3.11:
#      vmImage: 'macos-latest'
#      build_name: 'MacOS_311'
#      python.version: '3.11'
#    Linux_3.8:
#      vmImage: 'ubuntu-latest'
#      build_name: 'manylinux38'
#      python.version: '3.8'
#    Linux_3.9:
#      vmImage: 'ubuntu-latest'
#      build_name: 'manylinux39'
#      python.version: '3.9'
#    Linux_3.10:
#      vmImage: 'ubuntu-latest'
#      build_name: 'manylinux310'
#      python.version: '3.10'
#    Linux_3.11:
#      vmImage: 'ubuntu-latest'
#      build_name: 'manylinux311'
#      python.version: '3.11'

pool:

  vmImage: $(vmImage)
  python.version: $(python.version)

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'

#--------- Linux : Install manylinux dependencies
- bash: |
        python -m pip install cibuildwheel
        python -m cibuildwheel --output-dir wheelhouse
  displayName: manylinux build
  condition: eq( variables['Agent.OS'], 'Linux' )

#--------- Windows_NT : Build libopenblas
- script: |
    mkdir winlib
    cd winlib
    curl -L -o mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/13.2.0-16.0.6-11.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.2.0-mingw-w64ucrt-11.0.0-r1.zip
    dir
    tar -xf mingw64.zip
    set PATH=%cd%\mingw64\bin;%PATH%
    set GCC_PATH=%cd%\mingw64\bin
    echo "mingw-w64ucrt dir:"
    pwd
    cd ..
    gcc -v
    mkdir blaslib
    cd blaslib
    curl -L -o openblas.zip https://github.com/xianyi/OpenBLAS/releases/download/v0.3.24/OpenBLAS-0.3.24.zip
    dir
    tar -xf openblas.zip
    set OPENBLAS_LIB_PATH=%cd%\lib
    echo "OPENBLAS_LIB_PATH:"
    OPENBLAS_LIB_PATH
    make
    cd ..
  displayName: 'Windows_NT Build libopenblas'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

#--------- Windows_NT : Copy libopenblas.a
#- powershell: |
#    cp $(System.DefaultWorkingDirectory)\\pyEDM\\etc\\windows\\libopenblas.a $(System.DefaultWorkingDirectory)\\cppEDM\\lib\\libopenblas.a
#  displayName: 'Move window openblas binary'
#  condition: eq( variables['Agent.OS'], 'Windows_NT' )

#--------- Windows_NT : Setup mingw
#- bash: |
#    distutils_path=`echo "import distutils,os;print(os.path.dirname(distutils.__file__))"|python`
#    echo $'[build]\ncompiler=mingw32' > $distutils_path/distutils.cfg
#  displayName: setup mingw compiler option for windows build
#  condition: eq( variables['Agent.OS'], 'Windows_NT' )

#--------- Install dependencies
- script: |
    pip install --upgrade wheel
    pip install --upgrade setuptools
    pip install -r requirements.txt
  displayName: install required python modules for pyEDM build

#--------- Windows_NT : Build extension Force mingw32
###https://github.com/brechtsanders/winlibs_mingw/releases/download/12.2.0-16.0.0-10.0.0-ucrt-r5/winlibs-x86_64-posix-seh-gcc-12.2.0-mingw-w64ucrt-10.0.0-r5.zip
###https://github.com/brechtsanders/winlibs_mingw/releases/download/13.2.0-16.0.6-11.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.2.0-mingw-w64ucrt-11.0.0-r1.zip
###https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-14.0.0-9.0.0-ucrt-r7/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64ucrt-9.0.0-r7.zip
###https://github.com/brechtsanders/winlibs_mingw/releases/download/9.5.0-10.0.0-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-9.5.0-mingw-w64msvcrt-10.0.0-r1.zip
- script: |
#    mkdir winlib
#    cd winlib
#    curl -L -o mingw64.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/13.2.0-16.0.6-11.0.0-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.2.0-mingw-w64ucrt-11.0.0-r1.zip
#    dir
#    tar -xf mingw64.zip
#    set PATH=%cd%\mingw64\bin;%PATH%
#    set GCC_PATH=%cd%\mingw64\bin
#    echo "mingw-w64ucrt dir:"
#    pwd
#    cd ..
    gcc -v
    python setup.py build_ext "--compiler=mingw32"
  displayName: 'Windows_NT Build extension'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

#--------- Windows_NT & MacOS : Build pyEDM wheel
- script: python setup.py bdist_wheel
  displayName: Build pyEDM wheel
  condition: ne( variables['Agent.OS'], 'Linux' )

- publish: $(System.DefaultWorkingDirectory)/dist
  artifact: $(build_name)
  condition: ne( variables['Agent.OS'], 'Linux' )

- task: PublishBuildArtifacts@1
  inputs: {pathtoPublish: 'wheelhouse'}
  condition: eq( variables['Agent.OS'], 'Linux' )
